#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map", data = stations()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","Connection Type: ",ConnectionType,"<br>","Number of Points: ",NumberOfPoints,"<br>","Status: ",StatusType), clusterOptions = markerClusterOptions(), color = ~pal(UsageType)) %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map", data = stations()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(), color = ~pal(UsageType)) %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = df[df$UsageType == "Public"]
df3 = df[df$UsageType == "Private"]
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Public") %>%
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Private") %>%
})
addLayersControl(
overlayGroups = c("Public", "Private"),
options = layersControlOptions(collapsed = FALSE)
)
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = df[df$UsageType == "Public"]
df3 = df[df$UsageType == "Private"]
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Public") %>%
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Private") %>%
})
addLayersControl("map",
overlayGroups = c("Public", "Private"),
options = layersControlOptions(collapsed = FALSE)
)
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Public") %>%
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Private") %>%
})
addLayersControl("map",
overlayGroups = c("Public", "Private"),
options = layersControlOptions(collapsed = FALSE)
)
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Public")
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Private")
})
addLayersControl("map",
overlayGroups = c("Public", "Private"),
options = layersControlOptions(collapsed = FALSE)
)
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
pal <- colorFactor(c("navy", "red"), domain = c("Public", "Private"))
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Public")
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = ~pal(UsageType), group = "Private")
})
observe({
leafletProxy("map") %>%
addLayersControl(overlayGroups = c("Public", "Private"), options = layersControlOptions(collapsed = FALSE))
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "navy", group = "Public")
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "red", group = "Private")
})
observe({
leafletProxy("map") %>%
addLayersControl(overlayGroups = c("Public", "Private"), options = layersControlOptions(collapsed = FALSE))
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
View(df3)
View(df2)
View(df2)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar() %>%
addLayersControl(overlayGroups = c("Public", "Private"), options = layersControlOptions(collapsed = FALSE))
})
observe({
leafletProxy("map", data = public()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "navy", group = "Public")
})
observe({
leafletProxy("map", data = private()) %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "red", group = "Private")
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4)
})
observe({
leafletProxy("map") %>%
addCircleMarkers(data = public(), ~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "navy", group = "Public") %>%
addCircleMarkers(data = private(), ~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "red", group = "Private") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar() %>%
addLayersControl(overlayGroups = c("Public", "Private"), options = layersControlOptions(collapsed = FALSE))
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
#map sandbox HW
#Sean Olson
library(shiny)
library(leaflet.extras)
df = read.csv('stations.csv')
df2 = subset(df, UsageType == "Public")
df3 = subset(df, UsageType == "Private")
ui <- shinyUI(
fluidPage(
leafletOutput("map", width = "100%", height = "900px")
)
)
server <- function(input, output) {
stations <- reactive({
df
})
public <- reactive({
df2
})
private <- reactive({
df3
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(-93.65, 42.0285, zoom = 4) %>%
addLayersControl(overlayGroups = c("Public", "Private"), options = layersControlOptions(collapsed = FALSE))
})
observe({
leafletProxy("map") %>%
addCircleMarkers(data = public(), ~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "navy", group = "Public") %>%
addCircleMarkers(data = private(), ~Longitude, ~Latitude, popup = ~paste("<b>",LocationTitle,"</b><br>","<b>Connection Type:</b> ",ConnectionType,"<br>","<b>Number of Points:</b> ",NumberOfPoints,"<br>","<b>Status:</b> ",StatusType), clusterOptions = markerClusterOptions(),
color = "red", group = "Private") %>%
addMiniMap() %>%
addMeasure(position = "bottomleft", primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters", activeColor = "black", completedColor = "purple") %>%
addScaleBar()
})
}
app <- shinyApp(ui = ui, server = server)
runApp(app, launch.browser = TRUE)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
